import java.sql.Date;
import java.awt.Color;
import java.text.SimpleDateFormat;
import javax.swing.*;
import java.util.*;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * Main class for the Room Scheduler GUI application
 * @author kshit
 */
public class MainGUI extends javax.swing.JFrame {

    /**
     * Creates new form MainGUI
     */
    public MainGUI() {
        initComponents();
        facultyComboBox.setModel(new DefaultComboBoxModel(Faculty.getAllFaculty().toArray()));
        datesComboBox.setModel(new DefaultComboBoxModel(Dates.getAllDates().toArray()));
        reservationsByDateComboBox.setModel(new DefaultComboBoxModel(Dates.getAllDates().toArray()));
        ArrayList<String> roomNames = new ArrayList<String>();
        for(RoomEntry entry:RoomQueries.getAllRooms())
            roomNames.add(entry.getName());
        roomSelectorComboBox.setModel(new DefaultComboBoxModel(roomNames.toArray()));
        facultyCancelComboBox.setModel(new DefaultComboBoxModel(Faculty.getAllFaculty().toArray()));
        selectFacultyNameCombo.setModel(new DefaultComboBoxModel(Faculty.getAllFaculty().toArray()));
        String facultyName = (String)facultyCancelComboBox.getSelectedItem();
        ArrayList<Date> dates = new ArrayList<Date>();
        List<ReservationEntry> reservations = ReservationQueries.getReservationsByFaculty(facultyName);
        List<WaitlistEntry> waitlist = WaitlistQueries.getWaitlistByFaculty(facultyName);
        for(ReservationEntry entry:reservations)
            dates.add(entry.getDate());
        for(WaitlistEntry entry:waitlist)
            dates.add(entry.getDate());
        datesCancelComboBox.setModel(new DefaultComboBoxModel(dates.toArray()));
        setBackground(Color.WHITE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        titleBar = new javax.swing.JLabel();
        tabbedPane = new javax.swing.JTabbedPane();
        addFacultyTab = new javax.swing.JPanel();
        facultyNameLabel = new javax.swing.JLabel();
        facultyNameField = new javax.swing.JTextField();
        facultySubmitButton = new javax.swing.JButton();
        addDateTab = new javax.swing.JPanel();
        enterDateLabel = new javax.swing.JLabel();
        dateSpinner = new javax.swing.JSpinner();
        addDateSubmitButton = new javax.swing.JButton();
        addRoomTab = new javax.swing.JPanel();
        roomNameLabel = new javax.swing.JLabel();
        numberOfSeatsLabel = new javax.swing.JLabel();
        roomNameField = new javax.swing.JTextField();
        noOfSeatsField = new javax.swing.JTextField();
        addRoomSubmitButton = new javax.swing.JButton();
        addRoomLabel = new javax.swing.JLabel();
        dropRoomLabel = new javax.swing.JLabel();
        selectRoomLabel = new javax.swing.JLabel();
        roomSelectorComboBox = new javax.swing.JComboBox<>();
        dropRoomSubmitButton = new javax.swing.JButton();
        reserveTab = new javax.swing.JPanel();
        selectFacultyLabel = new javax.swing.JLabel();
        facultyComboBox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        selectDateLabel = new javax.swing.JLabel();
        datesComboBox = new javax.swing.JComboBox<>();
        enterNumberofSeatsLabel = new javax.swing.JLabel();
        numberOfSeatsField = new javax.swing.JTextField();
        reserveSubmitButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        selectCancelFacultyLabel = new javax.swing.JLabel();
        facultyCancelComboBox = new javax.swing.JComboBox<>();
        selectCancelDateLabel = new javax.swing.JLabel();
        datesCancelComboBox = new javax.swing.JComboBox<>();
        cancelSubmitButton = new javax.swing.JButton();
        viewReservationsTab = new javax.swing.JPanel();
        viewReservationsByDateLabel = new javax.swing.JLabel();
        reservationsByDateComboBox = new javax.swing.JComboBox<>();
        reservationsByDateSubmitButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        reservationsByDateList = new javax.swing.JTextArea();
        CheckWaitlistTab = new javax.swing.JPanel();
        viewWaitlistLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        waitlist = new javax.swing.JTextArea();
        waitlistSubmitButton = new javax.swing.JButton();
        checkYourStatusTab = new javax.swing.JPanel();
        selectFacultyName = new javax.swing.JLabel();
        checkStatusSubmitButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        reservationsbyFacultyArea = new javax.swing.JTextArea();
        reservationsLabel = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        waitListbyFacultyArea = new javax.swing.JTextArea();
        waitListLabel = new javax.swing.JLabel();
        selectFacultyNameCombo = new javax.swing.JComboBox<>();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 255, 255));

        titleBar.setBackground(new java.awt.Color(255, 255, 255));
        titleBar.setFont(new java.awt.Font("Verdana", 0, 30)); // NOI18N
        titleBar.setForeground(new java.awt.Color(192, 168, 0));
        titleBar.setText("Room Scheduler");

        tabbedPane.setBackground(new java.awt.Color(255, 150, 55));

        addFacultyTab.setBackground(new java.awt.Color(128, 255, 128));

        facultyNameLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        facultyNameLabel.setText("Faculty Name:");

        facultyNameField.setColumns(25);
        facultyNameField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        facultySubmitButton.setBackground(new java.awt.Color(255, 150, 55));
        facultySubmitButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        facultySubmitButton.setText("Submit");
        facultySubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                facultySubmitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addFacultyTabLayout = new javax.swing.GroupLayout(addFacultyTab);
        addFacultyTab.setLayout(addFacultyTabLayout);
        addFacultyTabLayout.setHorizontalGroup(
            addFacultyTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addFacultyTabLayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(facultyNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addFacultyTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(facultyNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(facultySubmitButton))
                .addContainerGap(363, Short.MAX_VALUE))
        );
        addFacultyTabLayout.setVerticalGroup(
            addFacultyTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addFacultyTabLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(addFacultyTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(facultyNameLabel)
                    .addComponent(facultyNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(facultySubmitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(265, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Add Faculty", addFacultyTab);

        addDateTab.setBackground(new java.awt.Color(128, 255, 128));

        enterDateLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        enterDateLabel.setText("Enter Date:");

        dateSpinner.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        dateSpinner.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(1576084560000L), new java.util.Date(1576084560000L), null, java.util.Calendar.DAY_OF_MONTH));

        addDateSubmitButton.setBackground(new java.awt.Color(255, 150, 55));
        addDateSubmitButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        addDateSubmitButton.setText("Submit");
        addDateSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDateSubmitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addDateTabLayout = new javax.swing.GroupLayout(addDateTab);
        addDateTab.setLayout(addDateTabLayout);
        addDateTabLayout.setHorizontalGroup(
            addDateTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addDateTabLayout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(enterDateLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addDateTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addDateSubmitButton)
                    .addComponent(dateSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(547, Short.MAX_VALUE))
        );
        addDateTabLayout.setVerticalGroup(
            addDateTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addDateTabLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(addDateTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(enterDateLabel))
                .addGap(29, 29, 29)
                .addComponent(addDateSubmitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(261, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Add Date", addDateTab);

        addRoomTab.setBackground(new java.awt.Color(128, 255, 128));

        roomNameLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        roomNameLabel.setText("Room Name:");

        numberOfSeatsLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        numberOfSeatsLabel.setText("Number of Seats:");

        roomNameField.setColumns(15);
        roomNameField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        noOfSeatsField.setColumns(3);
        noOfSeatsField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        addRoomSubmitButton.setBackground(new java.awt.Color(255, 150, 55));
        addRoomSubmitButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        addRoomSubmitButton.setText("Submit");
        addRoomSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRoomSubmitButtonActionPerformed(evt);
            }
        });

        addRoomLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        addRoomLabel.setText("Add Room");

        dropRoomLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        dropRoomLabel.setText("Drop Room");

        selectRoomLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        selectRoomLabel.setText("Select Room");

        roomSelectorComboBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        dropRoomSubmitButton.setBackground(new java.awt.Color(255, 150, 55));
        dropRoomSubmitButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        dropRoomSubmitButton.setText("Submit");
        dropRoomSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropRoomSubmitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addRoomTabLayout = new javax.swing.GroupLayout(addRoomTab);
        addRoomTab.setLayout(addRoomTabLayout);
        addRoomTabLayout.setHorizontalGroup(
            addRoomTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addRoomTabLayout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(addRoomTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addRoomTabLayout.createSequentialGroup()
                        .addComponent(roomNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(roomNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(149, 149, 149)
                        .addComponent(selectRoomLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                        .addComponent(roomSelectorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(addRoomTabLayout.createSequentialGroup()
                        .addGroup(addRoomTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(addRoomSubmitButton)
                            .addGroup(addRoomTabLayout.createSequentialGroup()
                                .addComponent(numberOfSeatsLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(noOfSeatsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dropRoomSubmitButton)))
                .addGap(144, 144, 144))
            .addGroup(addRoomTabLayout.createSequentialGroup()
                .addGap(131, 131, 131)
                .addComponent(addRoomLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(dropRoomLabel)
                .addGap(137, 137, 137))
        );
        addRoomTabLayout.setVerticalGroup(
            addRoomTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addRoomTabLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(addRoomTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addRoomLabel)
                    .addComponent(dropRoomLabel))
                .addGap(26, 26, 26)
                .addGroup(addRoomTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roomNameLabel)
                    .addComponent(roomNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectRoomLabel)
                    .addComponent(roomSelectorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(addRoomTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numberOfSeatsLabel)
                    .addComponent(noOfSeatsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(addRoomTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addRoomSubmitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dropRoomSubmitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(174, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Add/Drop Room", addRoomTab);

        reserveTab.setBackground(new java.awt.Color(128, 255, 128));

        selectFacultyLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        selectFacultyLabel.setText("Select Faculty");

        facultyComboBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, facultyComboBox, org.jdesktop.beansbinding.ObjectProperty.create(), facultyComboBox, org.jdesktop.beansbinding.BeanProperty.create("elements"));
        bindingGroup.addBinding(binding);

        facultyComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                facultyComboBoxActionPerformed(evt);
            }
        });

        selectDateLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        selectDateLabel.setText("Select Date");

        datesComboBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        enterNumberofSeatsLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        enterNumberofSeatsLabel.setText("Enter number of seats:");

        numberOfSeatsField.setColumns(3);
        numberOfSeatsField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        numberOfSeatsField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numberOfSeatsFieldActionPerformed(evt);
            }
        });

        reserveSubmitButton.setBackground(new java.awt.Color(255, 150, 55));
        reserveSubmitButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        reserveSubmitButton.setText("Submit");
        reserveSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reserveSubmitButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel1.setText("Reserve a Room");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel2.setText("Cancel Reservation");

        selectCancelFacultyLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        selectCancelFacultyLabel.setText("Select Faculty");

        facultyCancelComboBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        facultyCancelComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                facultyCancelComboBoxActionPerformed(evt);
            }
        });

        selectCancelDateLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        selectCancelDateLabel.setText("Select Date");

        datesCancelComboBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        datesCancelComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                datesCancelComboBoxActionPerformed(evt);
            }
        });

        cancelSubmitButton.setBackground(new java.awt.Color(255, 150, 55));
        cancelSubmitButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cancelSubmitButton.setText("Submit");
        cancelSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelSubmitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout reserveTabLayout = new javax.swing.GroupLayout(reserveTab);
        reserveTab.setLayout(reserveTabLayout);
        reserveTabLayout.setHorizontalGroup(
            reserveTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reserveTabLayout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(reserveTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(reserveTabLayout.createSequentialGroup()
                        .addGroup(reserveTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addGroup(reserveTabLayout.createSequentialGroup()
                                .addComponent(enterNumberofSeatsLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(numberOfSeatsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                    .addGroup(reserveTabLayout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(reserveSubmitButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cancelSubmitButton)
                        .addGap(148, 148, 148))
                    .addGroup(reserveTabLayout.createSequentialGroup()
                        .addGroup(reserveTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(reserveTabLayout.createSequentialGroup()
                                .addGroup(reserveTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(selectFacultyLabel)
                                    .addComponent(selectDateLabel))
                                .addGap(18, 18, 18)
                                .addGroup(reserveTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(facultyComboBox, 0, 71, Short.MAX_VALUE)
                                    .addComponent(datesComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(reserveTabLayout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(jLabel1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 309, Short.MAX_VALUE)
                        .addGroup(reserveTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(reserveTabLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(114, 114, 114))
                            .addGroup(reserveTabLayout.createSequentialGroup()
                                .addGroup(reserveTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, reserveTabLayout.createSequentialGroup()
                                        .addComponent(selectCancelFacultyLabel)
                                        .addGap(18, 18, 18))
                                    .addGroup(reserveTabLayout.createSequentialGroup()
                                        .addComponent(selectCancelDateLabel)
                                        .addGap(33, 33, 33)))
                                .addGroup(reserveTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(facultyCancelComboBox, 0, 72, Short.MAX_VALUE)
                                    .addComponent(datesCancelComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(106, 106, 106))))))
        );
        reserveTabLayout.setVerticalGroup(
            reserveTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reserveTabLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(reserveTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(26, 26, 26)
                .addGroup(reserveTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectFacultyLabel)
                    .addComponent(facultyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectCancelFacultyLabel)
                    .addComponent(facultyCancelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(reserveTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(datesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectDateLabel)
                    .addComponent(selectCancelDateLabel)
                    .addComponent(datesCancelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(reserveTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enterNumberofSeatsLabel)
                    .addComponent(numberOfSeatsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(reserveTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reserveSubmitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelSubmitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addContainerGap(128, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Reserve/Cancel Reservation", reserveTab);

        viewReservationsTab.setBackground(new java.awt.Color(128, 255, 128));

        viewReservationsByDateLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        viewReservationsByDateLabel.setText("View Reservations by Date:");

        reservationsByDateComboBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        reservationsByDateComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservationsByDateComboBoxActionPerformed(evt);
            }
        });

        reservationsByDateSubmitButton.setBackground(new java.awt.Color(255, 150, 55));
        reservationsByDateSubmitButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        reservationsByDateSubmitButton.setText("Submit");
        reservationsByDateSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservationsByDateSubmitButtonActionPerformed(evt);
            }
        });

        reservationsByDateList.setEditable(false);
        reservationsByDateList.setColumns(20);
        reservationsByDateList.setRows(5);
        jScrollPane2.setViewportView(reservationsByDateList);

        javax.swing.GroupLayout viewReservationsTabLayout = new javax.swing.GroupLayout(viewReservationsTab);
        viewReservationsTab.setLayout(viewReservationsTabLayout);
        viewReservationsTabLayout.setHorizontalGroup(
            viewReservationsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewReservationsTabLayout.createSequentialGroup()
                .addGroup(viewReservationsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(viewReservationsTabLayout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(viewReservationsByDateLabel)
                        .addGap(18, 18, 18)
                        .addComponent(reservationsByDateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54)
                        .addComponent(reservationsByDateSubmitButton))
                    .addGroup(viewReservationsTabLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 744, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        viewReservationsTabLayout.setVerticalGroup(
            viewReservationsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewReservationsTabLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(viewReservationsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reservationsByDateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewReservationsByDateLabel)
                    .addComponent(reservationsByDateSubmitButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 314, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabbedPane.addTab(" Reservations by Date", viewReservationsTab);

        CheckWaitlistTab.setBackground(new java.awt.Color(128, 255, 128));

        viewWaitlistLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        viewWaitlistLabel.setText("View Waitlist");

        waitlist.setColumns(20);
        waitlist.setRows(5);
        jScrollPane1.setViewportView(waitlist);

        waitlistSubmitButton.setBackground(new java.awt.Color(255, 150, 55));
        waitlistSubmitButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        waitlistSubmitButton.setText("Submit");
        waitlistSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                waitlistSubmitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CheckWaitlistTabLayout = new javax.swing.GroupLayout(CheckWaitlistTab);
        CheckWaitlistTab.setLayout(CheckWaitlistTabLayout);
        CheckWaitlistTabLayout.setHorizontalGroup(
            CheckWaitlistTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CheckWaitlistTabLayout.createSequentialGroup()
                .addGroup(CheckWaitlistTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CheckWaitlistTabLayout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(viewWaitlistLabel)
                        .addGap(30, 30, 30)
                        .addComponent(waitlistSubmitButton))
                    .addGroup(CheckWaitlistTabLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 743, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 40, Short.MAX_VALUE))
        );
        CheckWaitlistTabLayout.setVerticalGroup(
            CheckWaitlistTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CheckWaitlistTabLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(CheckWaitlistTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(waitlistSubmitButton)
                    .addComponent(viewWaitlistLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabbedPane.addTab("View Waitlist", CheckWaitlistTab);

        checkYourStatusTab.setBackground(new java.awt.Color(128, 255, 128));

        selectFacultyName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        selectFacultyName.setText("Select Faculty Name:");

        checkStatusSubmitButton.setBackground(new java.awt.Color(255, 150, 55));
        checkStatusSubmitButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        checkStatusSubmitButton.setText("Submit");
        checkStatusSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkStatusSubmitButtonActionPerformed(evt);
            }
        });

        reservationsbyFacultyArea.setColumns(20);
        reservationsbyFacultyArea.setRows(5);
        jScrollPane4.setViewportView(reservationsbyFacultyArea);

        reservationsLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        reservationsLabel.setText("Reservations");

        waitListbyFacultyArea.setColumns(20);
        waitListbyFacultyArea.setRows(5);
        jScrollPane5.setViewportView(waitListbyFacultyArea);

        waitListLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        waitListLabel.setText("Waitlist");

        selectFacultyNameCombo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        javax.swing.GroupLayout checkYourStatusTabLayout = new javax.swing.GroupLayout(checkYourStatusTab);
        checkYourStatusTab.setLayout(checkYourStatusTabLayout);
        checkYourStatusTabLayout.setHorizontalGroup(
            checkYourStatusTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(checkYourStatusTabLayout.createSequentialGroup()
                .addGroup(checkYourStatusTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(checkYourStatusTabLayout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(selectFacultyName)
                        .addGap(18, 18, 18)
                        .addComponent(selectFacultyNameCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59)
                        .addComponent(checkStatusSubmitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(checkYourStatusTabLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(checkYourStatusTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(waitListLabel)
                            .addComponent(reservationsLabel))
                        .addGap(25, 25, 25)
                        .addGroup(checkYourStatusTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 608, Short.MAX_VALUE)
                            .addComponent(jScrollPane4))))
                .addContainerGap(82, Short.MAX_VALUE))
        );
        checkYourStatusTabLayout.setVerticalGroup(
            checkYourStatusTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(checkYourStatusTabLayout.createSequentialGroup()
                .addGroup(checkYourStatusTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(checkYourStatusTabLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(checkYourStatusTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(selectFacultyName)
                            .addComponent(selectFacultyNameCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, checkYourStatusTabLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(checkStatusSubmitButton)))
                .addGroup(checkYourStatusTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(checkYourStatusTabLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(checkYourStatusTabLayout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(reservationsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(waitListLabel)
                        .addGap(82, 82, 82))))
        );

        tabbedPane.addTab("Check your status", checkYourStatusTab);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(264, 264, 264)
                .addComponent(titleBar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(tabbedPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleBar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabbedPane))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Displays a list of all the faculty's reservations and waitlist entries.
     * @param evt the action event
     */
    private void checkStatusSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkStatusSubmitButtonActionPerformed
        // TODO add your handling code here:
        List<ReservationEntry> reservationsByFaculty = ReservationQueries.getReservationsByFaculty((String)selectFacultyNameCombo.getSelectedItem());
        List<WaitlistEntry> waitlistByFaculty = WaitlistQueries.getWaitlistByFaculty((String)selectFacultyNameCombo.getSelectedItem());
        if(reservationsByFaculty.size()==0)
            reservationsbyFacultyArea.setText("No reservations yet for this faculty!");
        else
        {
            reservationsbyFacultyArea.setText("Date" + "\t" + "Room" + "\t" + "Seats" + "\t" + "Reserved on" + "\n");
            for(ReservationEntry entry: reservationsByFaculty)
                reservationsbyFacultyArea.append(entry.getDate() + "\t" + entry.getRoom() + "\t" + entry.getSeats() + "\t" + entry.getTimeStamp() + "\n");
        }
        if(waitlistByFaculty.size()==0)
            waitListbyFacultyArea.setText("This faculty is not on the waitlist!");
        else
        {
            waitListbyFacultyArea.setText("Date" + "\t" + "Seats" + "\t" + "Requested on" + "\t\t" + "Position"+ "\n");
            for(WaitlistEntry entry: waitlistByFaculty)
            {
                int position = WaitlistQueries.getWaitlistByDate(entry.getDate()).indexOf(entry) + 1;
                waitListbyFacultyArea.append(entry.getDate() + "\t" + entry.getSeats() + "\t" + entry.getTimeStamp() + "\t" + position + "\n");
            }
        }
        
        
    }//GEN-LAST:event_checkStatusSubmitButtonActionPerformed
    /**
    * Displays all waitlist entries in a text field.
    * @param evt the action event
    */
    private void waitlistSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_waitlistSubmitButtonActionPerformed
        // TODO add your handling code here:
        List<WaitlistEntry> entries = WaitlistQueries.getAllWaitlist();
        if(entries.size() == 0)
        waitlist.setText("Waitlist is empty");
        else
        {
            waitlist.setText("Date" + "\t" + "Faculty" + "\t" + "Seats" + "\t" + "Requested on" + "\t\t" + "Position" + "\n");
            for(WaitlistEntry entry: entries)
            {
                int position = WaitlistQueries.getWaitlistByDate(entry.getDate()).indexOf(entry) + 1;
                waitlist.append(entry.getDate() + "\t" + entry.getFaculty() + "\t" + entry.getSeats() + "\t" + entry.getTimeStamp() + "\t" + position +"\n");
            }
        }
    }//GEN-LAST:event_waitlistSubmitButtonActionPerformed
    /**
     * Displays all reservations on a selected date in a text field.
     * @param evt the action event
     */
    private void reservationsByDateSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reservationsByDateSubmitButtonActionPerformed
        // TODO add your handling code here
        Date date = (Date)reservationsByDateComboBox.getSelectedItem();
        List<ReservationEntry> entries = ReservationQueries.getReservationsByDate(date);
        if(entries.size() == 0)
        reservationsByDateList.setText("No reservations this day!");
        else
        {
            reservationsByDateList.setText("Faculty" + "\t" + "Room" + "\t" + "Date" + "\t" + "Seats" + "\t" + "Reserved on" + "\n");
            for(ReservationEntry entry: entries)
            {
                reservationsByDateList.append(entry.getFaculty()+ "\t" +entry.getRoom() + "\t" + entry.getDate() + "\t" + entry.getSeats() + "\t" + entry.getTimeStamp() + "\n");
            }
        }
    }//GEN-LAST:event_reservationsByDateSubmitButtonActionPerformed
    /**
     * Creates a reservation for faculty with given date and seats if rooms available, otherwise places them on waitlist in priority order.
     * @param evt the action event
     */
    private void reserveSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reserveSubmitButtonActionPerformed
        // TODO add your handling code here:
        java.sql.Timestamp currentTimestamp = new java.sql.Timestamp(Calendar.getInstance().getTime().getTime());
        List<RoomEntry> roomEntries = RoomQueries.getAllPossibleRooms(Integer.parseInt(numberOfSeatsField.getText()));
        List<ReservationEntry> currentReservations = ReservationQueries.getReservationsByDate((Date)datesComboBox.getSelectedItem());
        List<String> roomsBooked = ReservationQueries.getRoomsReservedByDate((Date)datesComboBox.getSelectedItem());
        List<WaitlistEntry> currentWaitlist = WaitlistQueries.getWaitlistByDate((Date)datesComboBox.getSelectedItem());
        boolean booked = false;
        for(ReservationEntry entry: currentReservations)
        {
            if(entry.getFaculty().equals(facultyComboBox.getSelectedItem()))
                booked = true;
        }

        for(WaitlistEntry entry: currentWaitlist)
        {
            if(entry.getFaculty().equals(facultyComboBox.getSelectedItem()))
                booked = true;
        }

        if(!booked)
        {
            int index = 0;
            while(roomEntries.size()>0 && index<roomEntries.size())
            {
                if(roomsBooked.contains(roomEntries.get(index).getName()))
                    roomEntries.remove(index);
                else
                    index++;
            }
            if(roomEntries.size() == 0)
            {
                WaitlistEntry wlEntry = new WaitlistEntry((String)facultyComboBox.getSelectedItem(),(Date)datesComboBox.getSelectedItem(), Integer.parseInt(numberOfSeatsField.getText()), currentTimestamp);
                WaitlistQueries.addWaitlistEntry(wlEntry);
                int position = WaitlistQueries.getWaitlistByDate((Date)datesComboBox.getSelectedItem()).indexOf(wlEntry) + 1;
                JOptionPane.showMessageDialog(reserveTab, String.format("Sorry, all rooms for the day are currently full!\nYou have been placed on waitlist number %d", position));
            }
            else
            {
                String roomAssigned = roomEntries.get(0).getName();
                ReservationEntry resEntry = new ReservationEntry((String)facultyComboBox.getSelectedItem(), roomAssigned, (Date)datesComboBox.getSelectedItem(), Integer.parseInt(numberOfSeatsField.getText()), currentTimestamp);
                ReservationQueries.addReservationEntry(resEntry);
                JOptionPane.showMessageDialog(reserveTab, String.format("Booking successful!\nYou have been assigned Room %s on date %s", roomAssigned, ((Date)datesComboBox.getSelectedItem()).toString()));
            }
        }
        else
        {
            JOptionPane.showMessageDialog(reserveTab, "Error, reservation failed.\nYou already have a room reserved or are on the waitlist on this date.");
        }
    }//GEN-LAST:event_reserveSubmitButtonActionPerformed

    private void numberOfSeatsFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numberOfSeatsFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_numberOfSeatsFieldActionPerformed

    private void facultyComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_facultyComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_facultyComboBoxActionPerformed
    /**
     * Adds a new date to the application
     * @param evt the action event
     */
    private void addDateSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDateSubmitButtonActionPerformed
        // TODO add your handling code here:
        SimpleDateFormat formater = new SimpleDateFormat("yyyy-MM-dd");
        String spinnerValue = formater.format(dateSpinner.getValue());
        Date date = Date.valueOf(spinnerValue);
        List<Date> currentDates = Dates.getAllDates();
        if(currentDates.contains(date))
        JOptionPane.showMessageDialog(addDateTab, "Date already exists!");
        else
        {
            Dates.addDate(date);
            datesComboBox.setModel(new DefaultComboBoxModel(Dates.getAllDates().toArray()));
            reservationsByDateComboBox.setModel(new DefaultComboBoxModel(Dates.getAllDates().toArray()));
            JOptionPane.showMessageDialog(addDateTab, "Date added succesfully");
        }

    }//GEN-LAST:event_addDateSubmitButtonActionPerformed
    /**
     * Adds a new faculty member to the application
     * @param evt the action event
     */
    private void facultySubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_facultySubmitButtonActionPerformed
        // TODO add your handling code here:
        List<String> currentFaculty = Faculty.getAllFaculty();
        if(currentFaculty.contains(facultyNameField.getText()))
        JOptionPane.showMessageDialog(addFacultyTab, "Faculty already exists!");
        else
        {
            Faculty.addFaculty(facultyNameField.getText());
            facultyComboBox.setModel(new DefaultComboBoxModel(Faculty.getAllFaculty().toArray()));
            selectFacultyNameCombo.setModel(new DefaultComboBoxModel(Faculty.getAllFaculty().toArray()));
            facultyCancelComboBox.setModel(new DefaultComboBoxModel(Faculty.getAllFaculty().toArray()));
            JOptionPane.showMessageDialog(addFacultyTab, "Faculty added succesfully");
        }
    }//GEN-LAST:event_facultySubmitButtonActionPerformed

    private void reservationsByDateComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reservationsByDateComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_reservationsByDateComboBoxActionPerformed
    /**
     * Adds a new room to the application, and checks if any faculty on the waitlist can be accomodated.
     * @param evt the action event
     */
    private void addRoomSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRoomSubmitButtonActionPerformed
        // TODO add your handling code here:
        List<RoomEntry> rooms = RoomQueries.getAllRooms();
        String facultyReserved = "";
        boolean found = false;
        for(RoomEntry entry: rooms)
        {
            if(entry.getName().equals(roomNameField.getText()))
                found = true;
        }
        if(found)
            JOptionPane.showMessageDialog(addRoomTab, "Room already exists!");
        else
        {
              List<WaitlistEntry> waitlist = WaitlistQueries.getAllWaitlist();
            String roomName = roomNameField.getText();
            int seats = Integer.parseInt(noOfSeatsField.getText());
            RoomQueries.addRoom(new RoomEntry(roomName, seats));
            while(waitlist.size()>0)
            {
                WaitlistEntry firstEntry = waitlist.get(0);
                if(firstEntry.getSeats()<=seats)
                {
                    if(!ReservationQueries.getRoomsReservedByDate(firstEntry.getDate()).contains(roomName))
                    {
                        ReservationQueries.addReservationEntry(new ReservationEntry(firstEntry.getFaculty(), roomName, firstEntry.getDate(), firstEntry.getSeats(), firstEntry.getTimeStamp()));
                        WaitlistQueries.deleteWaitlistEntry(firstEntry.getFaculty(),firstEntry.getDate());
                        facultyReserved += String.format("%s ----- %s%n", firstEntry.getFaculty(), firstEntry.getDate().toString());
                    }

                    waitlist.remove(0);
                }
                else
                    waitlist.remove(0);
            }
        ArrayList<String> roomNames = new ArrayList<String>();
        for(RoomEntry entry:RoomQueries.getAllRooms())
            roomNames.add(entry.getName());
        roomSelectorComboBox.setModel(new DefaultComboBoxModel(roomNames.toArray()));
        if(facultyReserved.equals(""))
            facultyReserved+="None";
        JOptionPane.showMessageDialog(addRoomTab, "Room added successfully!" + "\n" + "Here are all the faculty who were reserved:" + "\n" + facultyReserved);
        }
    }//GEN-LAST:event_addRoomSubmitButtonActionPerformed
    /**
     * Modifies the date combo box to display only dates for the selected faculty's reservations and waitlist.
     * @param evt the action event
     */
    private void facultyCancelComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_facultyCancelComboBoxActionPerformed
        // TODO add your handling code here:
        String facultyName = (String)facultyCancelComboBox.getSelectedItem();
        ArrayList<Date> dates = new ArrayList<Date>();
        List<ReservationEntry> reservations = ReservationQueries.getReservationsByFaculty(facultyName);
        List<WaitlistEntry> waitlist = WaitlistQueries.getWaitlistByFaculty(facultyName);
        for(ReservationEntry entry:reservations)
            dates.add(entry.getDate());
        for(WaitlistEntry entry:waitlist)
            dates.add(entry.getDate());
        datesCancelComboBox.setModel(new DefaultComboBoxModel(dates.toArray()));
    }//GEN-LAST:event_facultyCancelComboBoxActionPerformed

    private void datesCancelComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_datesCancelComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_datesCancelComboBoxActionPerformed
    /**
     * Cancels a faculty's reservation on a given date, or their waitlist entry.
     * Accommodates new faculty on waitlist if possible
     * @param evt the action event
     */
    private void cancelSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelSubmitButtonActionPerformed
        // TODO add your handling code here:
        int input = JOptionPane.showConfirmDialog(reserveTab, "Are you sure you want to cancel this reservation?", "Confirm cancellation", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if(input == 0)
        {
            boolean deleted = false;
            List<ReservationEntry> reservations = ReservationQueries.getReservationsByDate((Date)datesCancelComboBox.getSelectedItem());
            List<WaitlistEntry> waitlist = WaitlistQueries.getWaitlistByDate((Date)datesCancelComboBox.getSelectedItem());
            List<String> reservationsFaculty = new ArrayList<>();
            List<String> waitlistFaculty = new ArrayList<>();
            String newReservation = "";
            for(ReservationEntry entry:reservations)
                reservationsFaculty.add(entry.getFaculty());
            for(WaitlistEntry entry:waitlist)
                waitlistFaculty.add(entry.getFaculty());
            if(reservationsFaculty.contains((String)facultyCancelComboBox.getSelectedItem()))
            {
                RoomEntry roomBooked = null;
                ReservationEntry resEntry = null;
                List<RoomEntry> entries = RoomQueries.getAllRooms();
                for(ReservationEntry en:reservations)
                {
                    if(en.getFaculty().equals(facultyCancelComboBox.getSelectedItem()))
                    {
                        resEntry = en;
                        break;
                    }
                }
                for(RoomEntry room:entries)
                {
                    if(resEntry.getRoom().equals(room.getName()))
                    {
                        roomBooked = room;
                        break;
                    }
                                
                }
                ReservationQueries.deleteReservation((String)facultyCancelComboBox.getSelectedItem(), (Date)datesCancelComboBox.getSelectedItem());
                deleted = true;
                while(waitlist.size()>0)
                {
                    WaitlistEntry wlEntry = waitlist.get(0);
                    if(wlEntry.getSeats()<=roomBooked.getSeats())
                    {
                        ReservationQueries.addReservationEntry(new ReservationEntry(wlEntry.getFaculty(),roomBooked.getName(),wlEntry.getDate(),wlEntry.getSeats(), wlEntry.getTimeStamp()));
                        WaitlistQueries.deleteWaitlistEntry(wlEntry.getFaculty(), wlEntry.getDate());
                        newReservation += String.format("%s ----- %s ----- room %s%n", wlEntry.getFaculty(), wlEntry.getDate(), roomBooked.getName());
                        waitlist.remove(0);
                        break;
                    }
                    else
                        waitlist.remove(0);
                }
            }
            else if(waitlistFaculty.contains((String)facultyCancelComboBox.getSelectedItem()))
            {
                WaitlistQueries.deleteWaitlistEntry((String)facultyCancelComboBox.getSelectedItem(), (Date)datesCancelComboBox.getSelectedItem());
                deleted = true;
            }
            
            String facultyName = (String)facultyCancelComboBox.getSelectedItem();
            ArrayList<Date> dates = new ArrayList<Date>();
            List<ReservationEntry> reservations2 = ReservationQueries.getReservationsByFaculty(facultyName);
            List<WaitlistEntry> waitlist2 = WaitlistQueries.getWaitlistByFaculty(facultyName);
            for(ReservationEntry entry:reservations2)
                dates.add(entry.getDate());
            for(WaitlistEntry entry:waitlist2)
                dates.add(entry.getDate());
            datesCancelComboBox.setModel(new DefaultComboBoxModel(dates.toArray()));
            if(deleted)
            {
                if(newReservation.equals(""))
                    newReservation += "None";
                JOptionPane.showMessageDialog(reserveTab, "Reservation cancelled successfully!" + "\n" + "Here are all faculty who got reserved in place:" + "\n" + newReservation);
            }
            else
                JOptionPane.showMessageDialog(reserveTab, "Sorry, error occurred!");
        }
    }//GEN-LAST:event_cancelSubmitButtonActionPerformed
    /**
     * Drops a given room, cancelling all bookings on that room and rescheduling if possible.
     * @param evt the action event
     */
    private void dropRoomSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropRoomSubmitButtonActionPerformed
        // TODO add your handling code here:
        String roomName = (String)roomSelectorComboBox.getSelectedItem();
        int input = JOptionPane.showConfirmDialog(addRoomTab, String.format("You are about to drop room %s.\nAre you sure you want to perform this action?", roomName), "Confirm room drop", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if(input == 0)
        {
            List<ReservationEntry> bookedEntries = new ArrayList<ReservationEntry>();
            List<Date> allDates = Dates.getAllDates();
            String rebookedFaculty = "";
            String cancelledFaculty = "";
            for(Date date : allDates)
            {
                List<ReservationEntry> allEntries = ReservationQueries.getReservationsByDate(date);
                for(ReservationEntry entry : allEntries)
                {
                    if(entry.getRoom().equals(roomName))
                        bookedEntries.add(entry);
                }
            }

            RoomQueries.dropRoom(roomName);
            while(bookedEntries.size()>0)
            {
                ReservationEntry entry = bookedEntries.get(0);
                ReservationQueries.deleteReservation(entry.getFaculty(), entry.getDate());
                List<RoomEntry> possibleRooms = RoomQueries.getAllPossibleRooms(entry.getSeats());
                List<ReservationEntry> bookings = ReservationQueries.getReservationsByDate(entry.getDate());
                List<String> bookedRooms = new ArrayList<>();
                for(ReservationEntry booking: bookings)
                    bookedRooms.add(booking.getRoom());
                int i = 0;
                while(possibleRooms.size()>0 && i<possibleRooms.size())
                {
                    if(bookedRooms.contains(possibleRooms.get(i).getName()))
                        possibleRooms.remove(i);
                    else
                        i++;
                }
                if(possibleRooms.size()==0)
                {
                    WaitlistEntry newEntry = new WaitlistEntry(entry.getFaculty(),entry.getDate(),entry.getSeats(),entry.getTimeStamp());
                    WaitlistQueries.addWaitlistEntry(newEntry);
                    cancelledFaculty += String.format("%s ----- %s ----- position %s%n", entry.getFaculty(), entry.getDate(), WaitlistQueries.getWaitlistByDate(entry.getDate()).indexOf(newEntry)+1);
                }
                else
                {
                    ReservationQueries.addReservationEntry(new ReservationEntry(entry.getFaculty(), possibleRooms.get(0).getName(), entry.getDate(),entry.getSeats(),entry.getTimeStamp()));
                    rebookedFaculty += String.format("%s ----- %s ----- room %s%n", entry.getFaculty(), entry.getDate(), possibleRooms.get(0).getName());
                }

                bookedEntries.remove(0);
            }
            ArrayList<String> roomNames = new ArrayList<>();
            for(RoomEntry entry:RoomQueries.getAllRooms())
                roomNames.add(entry.getName());
            roomSelectorComboBox.setModel(new DefaultComboBoxModel(roomNames.toArray()));
            if(cancelledFaculty.equals(""))
                cancelledFaculty += "None";
            if(rebookedFaculty.equals(""))
                rebookedFaculty += "None";
            JOptionPane.showMessageDialog(addRoomTab, "Room dropped successfully!" + "\n" + "Following faculty were rebooked:" + "\n" + rebookedFaculty + "\n" + "Following faculty were moved to the waitlist:" + "\n" + cancelledFaculty);
        }
    }//GEN-LAST:event_dropRoomSubmitButtonActionPerformed

    /**
     * Main method to create GUI
     * @param args the command line arguments
     */
    public static void main(String args[]) {
   
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel CheckWaitlistTab;
    private javax.swing.JButton addDateSubmitButton;
    private javax.swing.JPanel addDateTab;
    private javax.swing.JPanel addFacultyTab;
    private javax.swing.JLabel addRoomLabel;
    private javax.swing.JButton addRoomSubmitButton;
    private javax.swing.JPanel addRoomTab;
    private javax.swing.JButton cancelSubmitButton;
    private javax.swing.JButton checkStatusSubmitButton;
    private javax.swing.JPanel checkYourStatusTab;
    private javax.swing.JSpinner dateSpinner;
    private javax.swing.JComboBox<String> datesCancelComboBox;
    private javax.swing.JComboBox<String> datesComboBox;
    private javax.swing.JLabel dropRoomLabel;
    private javax.swing.JButton dropRoomSubmitButton;
    private javax.swing.JLabel enterDateLabel;
    private javax.swing.JLabel enterNumberofSeatsLabel;
    private javax.swing.JComboBox<String> facultyCancelComboBox;
    private javax.swing.JComboBox<String> facultyComboBox;
    private javax.swing.JTextField facultyNameField;
    private javax.swing.JLabel facultyNameLabel;
    private javax.swing.JButton facultySubmitButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField noOfSeatsField;
    private javax.swing.JTextField numberOfSeatsField;
    private javax.swing.JLabel numberOfSeatsLabel;
    private javax.swing.JComboBox<String> reservationsByDateComboBox;
    private javax.swing.JTextArea reservationsByDateList;
    private javax.swing.JButton reservationsByDateSubmitButton;
    private javax.swing.JLabel reservationsLabel;
    private javax.swing.JTextArea reservationsbyFacultyArea;
    private javax.swing.JButton reserveSubmitButton;
    private javax.swing.JPanel reserveTab;
    private javax.swing.JTextField roomNameField;
    private javax.swing.JLabel roomNameLabel;
    private javax.swing.JComboBox<String> roomSelectorComboBox;
    private javax.swing.JLabel selectCancelDateLabel;
    private javax.swing.JLabel selectCancelFacultyLabel;
    private javax.swing.JLabel selectDateLabel;
    private javax.swing.JLabel selectFacultyLabel;
    private javax.swing.JLabel selectFacultyName;
    private javax.swing.JComboBox<String> selectFacultyNameCombo;
    private javax.swing.JLabel selectRoomLabel;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JLabel titleBar;
    private javax.swing.JLabel viewReservationsByDateLabel;
    private javax.swing.JPanel viewReservationsTab;
    private javax.swing.JLabel viewWaitlistLabel;
    private javax.swing.JLabel waitListLabel;
    private javax.swing.JTextArea waitListbyFacultyArea;
    private javax.swing.JTextArea waitlist;
    private javax.swing.JButton waitlistSubmitButton;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
